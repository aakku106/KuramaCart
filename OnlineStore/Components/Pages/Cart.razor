@page "/Cart"
@inject OnlineStore.Data.CartData cartData
@using OnlineStore.Data
@implements IDisposable
@using OnlineStore.Data.ProductData

<style>
    * {
        text-align: center !important;
    }

    body {
        background-color: rgba(44, 42, 42, 0.734);
        color: aqua !important;
    }

    table {
        margin: auto;
    }

    tr,
    th,
    td {
        border: 2px double pink;
        border-radius: 10px;
        font-size: 3rem;
        font-family: cursive;
        margin: 3vw;
    }

    .beauty-products {
        margin-bottom: 2rem;
    }

    .cart-section {
        margin-top: 2rem;
        padding: 1rem;
    }
</style>

<h1>Products Added to cart</h1>

<div class="beauty-products">
    <h2>Beauty Products</h2>
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @* @foreach (var product in cartData.GetBeautyCart()) *@
        @foreach (var product in cartData.BeautyCarts)
        {
            <div class="col">
                <div class="card">
                    <div class="card-img-container">
                        <img src="@product.ImagePath" class="card-img-top" alt="@product.ProductName picture"
                            loading="lazy">
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@product.ProductName</h5>
                        <div class="price">Rs@product.Price</div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="cart-section">
    <h2>Kitchen Products</h2>
    <table>
        <tr>
            <th>Item Name</th>
            <th>Cost</th>
            <th>Quantity</th>
        </tr>

        @foreach (var item in cartData.Carts)
        {
            <tr>
                <td>@item.ItemName</td>
                <td>â‚¹@item.ItemCost</td>
                <td>@item.ItemInCart</td>
            </tr>
        }
    </table>
</div>

@code {
    protected override void OnInitialized()
    {
        cartData.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        cartData.OnChange -= StateHasChanged;
    }
}
